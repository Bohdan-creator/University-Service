@inject SignInManager<User> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills nav-stacked">
    <li class="@ManageNavPages.IndexNavClass(ViewContext)"><a class="btn" asp-page="./Index">Profile</a></li>
   
    <li class="@ManageNavPages.ChangePasswordNavClass(ViewContext)"><a class="btn" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li class="@ManageNavPages.ExternalLoginsNavClass(ViewContext)"><a  class="btn" id="external-login" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="@ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)"><a class="btn" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    <li class="@ManageNavPages.PersonalDataNavClass(ViewContext)"><a  class="btn" asp-page="./PersonalData">Personal data</a></li>
    @if (User.IsInRole("Admin"))
    {
        <li class="@ManageNavPages.RegisterNewUsersNavClass(ViewContext)"><a  class="btn" asp-page="./RegisterNewUsers">Register New Users</a></li>

    }

</ul>
